{"version":3,"file":"static/js/857.684f78fb.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../ui/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/ui/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"names":["props","_jsxs","className","classes","children","_jsx","text","author","commentTextRef","useRef","_useHttp","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","CommentItem","_useState","useState","_useState2","_slicedToArray","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","CommentsList","onClick","NewCommentForm","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","HighlightedQuote","Route","path","exact","Link","to","concat","url","Comments"],"sourceRoot":""}